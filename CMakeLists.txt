cmake_minimum_required(VERSION 2.8.3)
project(robot_vision)
#set (CMAKE_CXX_STANDARD 11)
## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(
    catkin REQUIRED COMPONENTS
    actionlib_msgs
    pcl_conversions
    pcl_ros
    roscpp
    sensor_msgs
    message_generation
)
find_package(PCL 1.8 REQUIRED)
find_package( OpenCV 2 REQUIRED )

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

# Generate messages in the 'msg' folder
 add_message_files(
   DIRECTORY msg
   FILES pointcloudVector.msg
#   Message2.msg
 )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
 add_action_files(
    DIRECTORY action
#    FILES Fibonacci.action
    FILES SVMclassifier.action
 )

## Generate added messages and services with any dependencies listed here
 generate_messages(
    DEPENDENCIES
    sensor_msgs
    actionlib_msgs
 )

generate_dynamic_reconfigure_options(
  cfg/robot_vision_params.cfg
)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
 INCLUDE_DIRS include
 LIBRARIES robot_vision
 CATKIN_DEPENDS pcl_conversions
                pcl_ros
                roscpp
                sensor_msgs
                actionlib_msgs
                message_runtime

#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  ${PROJECT_SOURCE_DIR}/include
  ${catkin_INCLUDE_DIRS}
  ${PCL_INCLUDE_DIRS}
  ${OpenCV_INCLUDE_DIRS}
)

link_directories(${PCL_LIBRARY_DIRS})
link_directories(${OpenCV_LIBRARY_DIRS})


## Declare a C++ library
add_library(${PROJECT_NAME}
  src/visualizer.cpp
  src/robot_vision_common.cpp
#  src/cloud_segmenter.cpp
#  src/descriptors.cpp
)

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/robot_vision_node.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_robot_vision.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

add_executable(
    obj_detector src/obj_detector.cpp
    ${PROJECT_SOURCE_DIR}/src/visualizer.cpp
    ${PROJECT_SOURCE_DIR}/src/cloud_segmenter.cpp
    ${PROJECT_SOURCE_DIR}/src/descriptors.cpp
    ${PROJECT_SOURCE_DIR}/src/classifier.cpp
    ${PROJECT_SOURCE_DIR}/src/robot_vision_common.cpp
    ${PROJECT_SOURCE_DIR}/include/robot_vision/visualizer.h
    ${PROJECT_SOURCE_DIR}/include/robot_vision/cloud_segmenter.h
    ${PROJECT_SOURCE_DIR}/include/robot_vision/descriptors.h
    ${PROJECT_SOURCE_DIR}/include/robot_vision/classifier.h
    ${PROJECT_SOURCE_DIR}/include/robot_vision/robot_vision_common.h
    ${PROJECT_SOURCE_DIR}/include/robot_vision/common_constants.h
    )


add_dependencies(
    obj_detector
    ${${PROJECT_NAME}_EXPORTED_TARGETS}
    ${catkin_EXPORTED_TARGETS}
    ${PROJECT_NAME}_gencfg)

target_link_libraries(
    obj_detector
    ${catkin_LIBRARIES}
    ${PCL_LIBRARIES}
    ${OpenCV_LIBS})

add_executable(
    obj_recognition src/obj_recognition.cpp
    ${PROJECT_SOURCE_DIR}/src/visualizer.cpp
    ${PROJECT_SOURCE_DIR}/src/cloud_segmenter.cpp
    ${PROJECT_SOURCE_DIR}/src/descriptors.cpp
    ${PROJECT_SOURCE_DIR}/src/classifier.cpp
    ${PROJECT_SOURCE_DIR}/src/robot_vision_common.cpp
    ${PROJECT_SOURCE_DIR}/include/robot_vision/visualizer.h
    ${PROJECT_SOURCE_DIR}/include/robot_vision/cloud_segmenter.h
    ${PROJECT_SOURCE_DIR}/include/robot_vision/descriptors.h
    ${PROJECT_SOURCE_DIR}/include/robot_vision/classifier.h
    ${PROJECT_SOURCE_DIR}/include/robot_vision/robot_vision_common.h
    ${PROJECT_SOURCE_DIR}/include/robot_vision/common_constants.h
    )


add_dependencies(
    obj_recognition
    ${${PROJECT_NAME}_EXPORTED_TARGETS}
    ${catkin_EXPORTED_TARGETS}
    ${PROJECT_NAME}_gencfg)

target_link_libraries(
    obj_recognition
    ${catkin_LIBRARIES}
    ${PCL_LIBRARIES}
    ${OpenCV_LIBS})


## TF emitter
add_executable(
    tf_emitter
    ${PROJECT_SOURCE_DIR}/src/tf_emitter.cpp )

add_dependencies(
    tf_emitter
    ${${PROJECT_NAME}_EXPORTED_TARGETS}
    ${catkin_EXPORTED_TARGETS})

target_link_libraries(
    tf_emitter
    ${catkin_LIBRARIES})

## SVM_trainer
add_executable(
    SVM_trainer
    ${PROJECT_SOURCE_DIR}/src/SVM_trainer.cpp
#    ${PROJECT_SOURCE_DIR}/include/robot_vision/json.hpp
    ${PROJECT_SOURCE_DIR}/src/classifier.cpp
    ${PROJECT_SOURCE_DIR}/src/descriptors.cpp
    ${PROJECT_SOURCE_DIR}/include/robot_vision/classifier.h
    ${PROJECT_SOURCE_DIR}/include/robot_vision/descriptors.h
    )

add_dependencies(
    SVM_trainer
    ${${PROJECT_NAME}_EXPORTED_TARGETS}
    ${catkin_EXPORTED_TARGETS})

target_link_libraries(
    SVM_trainer
    ${catkin_LIBRARIES}
    ${PCL_LIBRARIES}
    ${OpenCV_LIBS})

##------------------------------------------------------------------------------##
## Action Server
add_executable(
    SVM_Action_Server ${PROJECT_SOURCE_DIR}/src/SVM_Action_Server.cpp
    ${PROJECT_SOURCE_DIR}/src/classifier.cpp
    ${PROJECT_SOURCE_DIR}/include/robot_vision/classifier.h)

add_dependencies(
  SVM_Action_Server
  ${robot_vision_EXPORTED_TARGETS}
)

target_link_libraries(
    SVM_Action_Server
    ${catkin_LIBRARIES}
    ${PCL_LIBRARIES}
    ${OpenCV_LIBS})




## Action Client
add_executable(SVM_Action_Client src/SVM_Action_Client.cpp)

add_dependencies(
  SVM_Action_Client
  ${robot_vision_EXPORTED_TARGETS}
)

target_link_libraries(
  SVM_Action_Client
  ${catkin_LIBRARIES}
)

##------------------------------------------------------------------------------##

#Add custom (non compiling) targets so launch scripts and python files show up in QT Creator's project view.
file(GLOB_RECURSE EXTRA_FILES */*)
file(GLOB_RECURSE README_FILES *.md)
add_custom_target(
    ${PROJECT_NAME}_OTHER_FILES ALL WORKING_DIRECTORY
    ${PROJECT_SOURCE_DIR} SOURCES
    ${EXTRA_FILES}
    ${README_FILES})








